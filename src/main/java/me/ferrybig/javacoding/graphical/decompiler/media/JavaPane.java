/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package me.ferrybig.javacoding.graphical.decompiler.media;

import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.URL;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.GroupLayout;
import javax.swing.Icon;
import javax.swing.JComponent;
import javax.swing.JScrollPane;
import javax.swing.JTextPane;
import javax.swing.SwingWorker;
import org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;
import org.fife.ui.rtextarea.RTextScrollPane;

/**
 *
 * @author Fernando
 */
public class JavaPane extends javax.swing.JPanel implements CodePane {

	public JavaPane(CodePaneConfig conf) {
		initComponents();
		readText(conf.getUrl());
	}

	@Override
	public CodePane contentUpdated(URL newUrl) {
		return null;
	}

	@Override
	public JComponent getContent() {
		return this;
	}

	@Override
	public Icon getIcon(boolean hasSources) {
		return null;
	}

	private void readText(URL in) {
		new SwingWorker<Void, char[]>() {

			StringBuilder build = new StringBuilder();

			@Override
			protected void process(List<char[]> chunks) {
				for (char[] c : chunks) {
					build.append(c);
				}
				textPane.setText(build.toString());
			}

			@Override
			protected Void doInBackground() throws Exception {
				try (InputStream i = in.openStream()) {
					BufferedReader r = new BufferedReader(new InputStreamReader(i));
					char[] c = new char[1024 * 32];
					int read;
					int readOffset = 0;
					do {
						read = r.read(c, readOffset, c.length - readOffset);
						readOffset += read;
						if (readOffset * 2 > c.length) {
							char[] copy = new char[readOffset];
							System.arraycopy(c, 0, copy, 0, readOffset);
							this.publish(new char[][]{(char[]) copy});
							readOffset = 0;
						}
					} while (read > 0);
					if (readOffset > 0) {
						char[] copy = new char[readOffset];
						System.arraycopy(c, 0, copy, 0, readOffset);
						this.publish(new char[][]{(char[]) copy});
					}
				}
				return null;
			}
		}.execute();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        GridBagConstraints gridBagConstraints;

        scrollPane = new RTextScrollPane();
        textPane = new RSyntaxTextArea();

        setLayout(new GridBagLayout());

        textPane.setColumns(20);
        textPane.setRows(5);
        textPane.setTabSize(4);
        textPane.setMarginLineEnabled(true);
        textPane.setPaintMatchedBracketPair(true);
        textPane.setPaintTabLines(true);
        textPane.setSyntaxEditingStyle("text/java");
        scrollPane.setViewportView(textPane);

        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        add(scrollPane, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private RTextScrollPane scrollPane;
    private RSyntaxTextArea textPane;
    // End of variables declaration//GEN-END:variables
}
