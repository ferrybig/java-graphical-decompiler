/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package me.ferrybig.javacoding.graphical.decompiler.find;

import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.Beans;
import java.io.IOException;
import java.text.ParseException;
import java.util.List;
import java.util.concurrent.Future;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;
import javax.swing.DefaultComboBoxModel;
import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JFormattedTextField;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.LayoutStyle;
import javax.swing.WindowConstants;
import javax.swing.text.DefaultFormatterFactory;
import me.ferrybig.javacoding.graphical.decompiler.CodeOverview;

/**
 *
 * @author Fernando
 */
public class FindDialog extends javax.swing.JDialog {

	private static final long serialVersionUID = -4835269298085063549L;
	private final CodeOverview overview;
	private final Pattern filePattern = Pattern.compile(".*\\.class", Pattern.CASE_INSENSITIVE);

	public FindDialog(java.awt.Frame parent, CodeOverview overview, boolean modal) {
		super(parent, modal);
		this.overview = overview;
		initComponents();
	}

	private Pattern tryCompile() throws ParseException {
		String pattern = textField.getText();
		int flags = 0;
		if (!regex.isSelected()) {
			flags |= Pattern.LITERAL;
		}
		if (caseInsensitivity.isSelected()) {
			flags |= Pattern.CASE_INSENSITIVE;
		}
		try {
			return Pattern.compile(pattern, flags);
		} catch (PatternSyntaxException ex) {
			throw (ParseException) new ParseException(pattern, ex.getIndex()).initCause(ex);
		}
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        GridBagConstraints gridBagConstraints;

        fileTypes = new JComboBox<>();
        searchButton = new JButton();
        regex = new JCheckBox();
        caseInsensitivity = new JCheckBox();
        textField = new JTextField();

        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        setLocationByPlatform(true);
        getContentPane().setLayout(new GridBagLayout());

        fileTypes.setEditable(true);
        fileTypes.setModel(new DefaultComboBoxModel<>(new String[] { "\\.(?:class|java)$", "\\.class$", "\\.java$" }));
        fileTypes.setToolTipText("Not implemented at the moment");
        fileTypes.setEnabled(false);
        fileTypes.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                searchSubmit(evt);
            }
        });
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new Insets(3, 3, 3, 3);
        getContentPane().add(fileTypes, gridBagConstraints);

        searchButton.setText("Find");
        searchButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                searchSubmit(evt);
            }
        });
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.insets = new Insets(3, 3, 3, 3);
        getContentPane().add(searchButton, gridBagConstraints);

        regex.setText("Regex");
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new Insets(3, 3, 3, 3);
        getContentPane().add(regex, gridBagConstraints);

        caseInsensitivity.setText("Case insensentive");
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new Insets(3, 3, 3, 3);
        getContentPane().add(caseInsensitivity, gridBagConstraints);
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.insets = new Insets(3, 3, 3, 3);
        getContentPane().add(textField, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchSubmit(ActionEvent evt) {//GEN-FIRST:event_searchSubmit
		Pattern p;
		try {
			p = this.tryCompile();
		} catch (ParseException ex) {
			JOptionPane.showMessageDialog(this, ex.getCause().toString(), "Invalid regex", JOptionPane.ERROR_MESSAGE);
			return;
		}
		if (p == null) {
			return;
		}
		this.overview.startSearch(p, filePattern);
		this.setVisible(false);
    }//GEN-LAST:event_searchSubmit

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JCheckBox caseInsensitivity;
    private JComboBox<String> fileTypes;
    private JCheckBox regex;
    private JButton searchButton;
    private JTextField textField;
    // End of variables declaration//GEN-END:variables
}
