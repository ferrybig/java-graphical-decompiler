/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package me.ferrybig.javacoding.graphical.decompiler.media;

import java.awt.Desktop;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.JarURLConnection;
import java.net.URISyntaxException;
import java.net.URL;
import java.net.URLConnection;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingWorker;
import me.ferrybig.javacoding.graphical.decompiler.CodeOverview;

/**
 *
 * @author Fernando
 */
public class UnknownCodePane extends javax.swing.JPanel {

	private static final Logger LOG = Logger.getLogger(UnknownCodePane.class.getName());

	private static final long serialVersionUID = -5177812053571625109L;
	private final CodePaneConfig conf;
	private final CodeOverview overview;

	public UnknownCodePane(CodePaneConfig conf, CodeOverview overview) {
		this.conf = conf;
		this.overview = overview;
		initComponents();
	}

	private String getExtension() {
		String path = conf.getPath();
		int index = path.lastIndexOf('.');
		return path.substring(index + 1);
	}

	private String getFileSize() {
		URL url = conf.getUrl();
		try {
			final URLConnection connection = url.openConnection();
			return String.valueOf(connection.getContentLengthLong());
		} catch (IOException ex) {
			LOG.log(Level.SEVERE, "Error getting file size of " + url, ex);
			return "Error!";
		}
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        GridBagConstraints gridBagConstraints;

        fileTypeLabel = new JLabel();
        openInSystemAction = new JButton();
        openInlineAction = new JComboBox<>();
        FileTypeList = new JButton();
        fileSizeLabel = new JLabel();
        fileName = new JTextField();
        decompileProgress = new JProgressBar();
        fileType = new JTextField();
        fileSize = new JTextField();

        setLayout(new GridBagLayout());

        fileTypeLabel.setText("Filetype:");
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.insets = new Insets(3, 3, 3, 3);
        add(fileTypeLabel, gridBagConstraints);

        openInSystemAction.setText("Open in system");
        openInSystemAction.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                openInSystemActionActionPerformed(evt);
            }
        });
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.insets = new Insets(3, 3, 3, 3);
        add(openInSystemAction, gridBagConstraints);

        openInlineAction.setModel(new DefaultComboBoxModel<>(FileType.values()));
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.insets = new Insets(3, 3, 3, 3);
        add(openInlineAction, gridBagConstraints);

        FileTypeList.setText("Open as:");
        FileTypeList.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                FileTypeListActionPerformed(evt);
            }
        });
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.insets = new Insets(3, 3, 3, 3);
        add(FileTypeList, gridBagConstraints);

        fileSizeLabel.setText("Filesize:");
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.insets = new Insets(3, 3, 3, 3);
        add(fileSizeLabel, gridBagConstraints);

        fileName.setText(conf.getPath());
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.insets = new Insets(3, 3, 3, 3);
        add(fileName, gridBagConstraints);

        decompileProgress.setValue(conf.getUrl().getProtocol().equals("jar") ? 0 : 100
        );
        decompileProgress.setString(conf.getUrl().getProtocol().equals("jar") ? "Status: Compressed" : "Status: Ready to open in system"
        );
        decompileProgress.setStringPainted(true);
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.insets = new Insets(3, 3, 3, 3);
        add(decompileProgress, gridBagConstraints);

        fileType.setText(getExtension());
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.insets = new Insets(3, 3, 3, 3);
        add(fileType, gridBagConstraints);

        fileSize.setText(getFileSize());
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.insets = new Insets(3, 3, 3, 3);
        add(fileSize, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void openInSystemActionActionPerformed(ActionEvent evt) {//GEN-FIRST:event_openInSystemActionActionPerformed
		if (conf.getUrl().getProtocol().equals("jar")) {
			decompileProgress.setIndeterminate(true);
			decompileProgress.setString("Status: decompressing");
			SwingWorker<Void, URL> worker = new SwingWorker<Void, URL>() {

				@Override
				protected void done() {
					try {
						this.get();
					} catch (InterruptedException | ExecutionException ex) {
						LOG.log(Level.SEVERE, null, ex);
					}
				}

				@Override
				protected Void doInBackground() throws Exception {
					URLConnection con = conf.getUrl().openConnection();
					long size = con.getContentLengthLong();
					try (InputStream in = conf.getUrl().openStream(); OutputStream out = new BufferedOutputStream(overview.createTempFile(conf.getPath()))) {
						byte[] buf = new byte[1024 * 32];
						int len;
						while ((len = in.read(buf)) != -1) {
							out.write(buf, 0, len);
						}
					}
					return null;
				}

			};
			worker.addPropertyChangeListener(e -> {

			});
			worker.execute();
		} else {
			try {
				Desktop.getDesktop().browse(conf.getUrl().toURI());
			} catch (URISyntaxException | IOException ex) {
				LOG.log(Level.SEVERE, null, ex);
			}
		}
    }//GEN-LAST:event_openInSystemActionActionPerformed

    private void FileTypeListActionPerformed(ActionEvent evt) {//GEN-FIRST:event_FileTypeListActionPerformed
		// TODO add your handling code here:
    }//GEN-LAST:event_FileTypeListActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JButton FileTypeList;
    private JProgressBar decompileProgress;
    private JTextField fileName;
    private JTextField fileSize;
    private JLabel fileSizeLabel;
    private JTextField fileType;
    private JLabel fileTypeLabel;
    private JButton openInSystemAction;
    private JComboBox<FileType> openInlineAction;
    // End of variables declaration//GEN-END:variables
}
