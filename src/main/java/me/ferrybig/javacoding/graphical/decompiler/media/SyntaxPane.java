/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package me.ferrybig.javacoding.graphical.decompiler.media;

import me.ferrybig.javacoding.graphical.decompiler.StringLoader;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.net.URL;
import java.util.function.Function;
import java.util.logging.Logger;
import javax.swing.Icon;
import javax.swing.JComponent;
import org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;
import org.fife.ui.rsyntaxtextarea.Token;
import org.fife.ui.rtextarea.RTextScrollPane;

/**
 *
 * @author Fernando
 */
public class SyntaxPane extends javax.swing.JPanel implements CodePane {

	private final String syntax;
	private static final Logger LOG = Logger.getLogger(SyntaxPane.class.getName());

	public SyntaxPane(CodePaneConfig conf, String syntax) {
		this.syntax = syntax;
		initComponents();
		textPane.setSyntaxEditingStyle(syntax);
		scrollPane.setFoldIndicatorEnabled(true);
		scrollPane.setLineNumbersEnabled(true);
		new StringLoader(conf.getUrl(), t -> {
			int caret = textPane.getCaretPosition();
			textPane.setText(t);
			textPane.setCaretPosition(caret);
		}, e -> textPane.setText("// " + e)).execute();
	}

	@Override
	public CodePane contentUpdated(URL newUrl) {
		return null;
	}

	@Override
	public JComponent getContent() {
		return this;
	}

	@Override
	public Icon getIcon(boolean hasSources) {
		return null;
	}

	public static Function<CodePaneConfig, CodePane> forSyntax(String syntax) {
		return c -> new SyntaxPane(c, syntax);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        GridBagConstraints gridBagConstraints;

        scrollPane = new RTextScrollPane();
        textPane = new RSyntaxTextArea();

        setLayout(new GridBagLayout());

        scrollPane.setFoldIndicatorEnabled(true);
        scrollPane.setLineNumbersEnabled(true);

        textPane.setEditable(false);
        textPane.setColumns(20);
        textPane.setRows(5);
        textPane.setTabSize(4);
        textPane.setText("package we.are.still.loading;\n\n// Loading file...\n\npublic class Loading {\n\n\tpublic static void main(String ... args) {\n\t\tSystem.out.println(\"We are still loading...\");\n\t}\n\n}"); // NOI18N
        textPane.setMarginLineEnabled(true);
        textPane.setPaintMatchedBracketPair(true);
        textPane.setPaintTabLines(true);
        textPane.setSyntaxEditingStyle("text/java");
        textPane.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                textPaneMouseClicked(evt);
            }
        });
        scrollPane.setViewportView(textPane);

        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        add(scrollPane, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void textPaneMouseClicked(MouseEvent evt) {//GEN-FIRST:event_textPaneMouseClicked
		if (!evt.isControlDown()) {
			return;
		}
		if (syntax.equals("text/java")) {
			final int caretLineNumber = textPane.getCaretLineNumber();
			final int caretLocation = textPane.getCaretPosition();
			Token token = textPane.getTokenListForLine(caretLineNumber);
			while (token != null && token.getEndOffset() < caretLocation) {
				token = token.getNextToken();
			}
			if (token == null) {
				return;
			}
			LOG.info("Found: " + token);
		}
    }//GEN-LAST:event_textPaneMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private RTextScrollPane scrollPane;
    private RSyntaxTextArea textPane;
    // End of variables declaration//GEN-END:variables
}
