/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package me.ferrybig.javacoding.graphical.decompiler.find;

import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.CancellationException;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import java.util.stream.Collectors;
import javax.swing.GroupLayout;
import javax.swing.JPanel;
import javax.swing.JProgressBar;
import javax.swing.JScrollPane;
import javax.swing.JTree;
import javax.swing.WindowConstants;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import me.ferrybig.javacoding.graphical.decompiler.SearchResult;
import static me.ferrybig.javacoding.graphical.decompiler.util.HTMLEscape.escapeHTML;

/**
 *
 * @author Fernando
 */
public class FindResults extends javax.swing.JDialog implements FindListener {

	private static final Logger LOG = Logger.getLogger(FindResults.class.getName());
	private static final long serialVersionUID = -2073840936612054472L;
	private final DefaultMutableTreeNode root;
	private final DefaultMutableTreeNode searching;

	public FindResults(java.awt.Frame parent, Pattern pattern) {
		super(parent, false);
		root = new DefaultMutableTreeNode("Results for " + pattern);
		searching = new DefaultMutableTreeNode("Searching...");
		root.add(searching);
		initComponents();
	}

	@Override
	public void done(Future<Void> future) {
		((DefaultTreeModel) tree.getModel()).removeNodeFromParent(searching);
		try {
			future.get();
		} catch (CancellationException ex) {
			LOG.log(Level.INFO, "Cancelled");
		} catch (InterruptedException | ExecutionException ex) {
			LOG.log(Level.SEVERE, null, ex);
		}
	}

	@Override
	public void madeProgress(int progress, String lastFile) {
		this.progress.setValue(progress);
		this.progress.setString("Searching in: \n" + lastFile);
	}

	@Override
	public void onResult(List<SearchResult> results) {
		String lastFile = null;
		DefaultMutableTreeNode lastNode = null;
		for (SearchResult result : results) {
			if (!result.getFile().equals(lastFile) || lastNode == null) {
				lastNode = findOrCreateNode(root, result.getFile(), true);
			}
			((DefaultTreeModel) tree.getModel()).insertNodeInto(
					new DefaultMutableTreeNode(result.getLineNumber() + ": " + result.getMatch().get(result.getListLineNumber())),
					lastNode, lastNode.getChildCount());
		}
	}

	@Override
	public void totalCalculated(int total) {
		this.progress.setMaximum(total);
		this.progress.setIndeterminate(false);
	}

	private DefaultMutableTreeNode findOrCreateNode(DefaultMutableTreeNode node, String name, boolean children) {
		DefaultMutableTreeNode child = null;
		int size = node.getChildCount();
		int low = 0;
		int high = size - 1;
		int mid;
		while (low <= high) {
			mid = (low + high) >>> 1;
			DefaultMutableTreeNode next = (DefaultMutableTreeNode) node.getChildAt(mid);
			int cmp = ((String) next.getUserObject()).compareTo(name);
			if (cmp < 0) {
				low = mid + 1;
			} else if (cmp > 0) {
				high = mid - 1;
			} else {
				child = next;
				break;
			}
		}
		if (child == null) {
			child = new DefaultMutableTreeNode(name, children);
			((DefaultTreeModel) tree.getModel()).insertNodeInto(child, node, size == 0 ? 0 : low);
		}
		return child;
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        GridBagConstraints gridBagConstraints;

        scroll = new JScrollPane();
        tree = new JTree();
        progress = new JProgressBar();

        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Find results");
        setMinimumSize(new Dimension(200, 200));
        getContentPane().setLayout(new GridBagLayout());

        tree.setModel(new DefaultTreeModel(root));
        scroll.setViewportView(tree);

        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(scroll, gridBagConstraints);

        progress.setIndeterminate(true);
        progress.setString("...");
        progress.setStringPainted(true);
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        getContentPane().add(progress, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JProgressBar progress;
    private JScrollPane scroll;
    private JTree tree;
    // End of variables declaration//GEN-END:variables
}
